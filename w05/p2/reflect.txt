///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #5
Full Name  : Julia Alekseev
Student ID#: 051292134

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////

1. When we use “magic” numbers it is hard for another programmer or even for yourself after a period of time. 
   You cannot identify to which context they belong. Using declared variables or macros in the beginning of the code making it easier to identify them in the given code. 
   Moreover,  when we are writing a code, the code should be generic, and should work in regardless of the value that was set up in the variable or in the macro. 
   In this workshop we defined days to be 3, and the years to be between 2012 and 2022 in our macros. Now it is 2023, and 2024 will be coming soon. 
   Because we used macros to define the highest year and the lowest year, we can update the wanted years in a few key strokes, rather than diving into the code and trying to adjust the logic. 
   In addition, we can adjust the day log amount to be any other max days. If I update my values now, the program will work and will be adjusted to the new values. 
   Furthermore, choosing readable meaningful names for my variables like “month”, “year”, “eveTotal” etc. make them easily identified. 
   Into the bargain, when we need to debug our code, it is easier to read, easier to identify. 
   As well it provides us flexibility and make our code generalized for the option to adjust the values without diving deep line by line or messing up the logic. 
2. As explained in number 1, when we design a code we want to make sure we can identify and read everything in it clearly. 
   Creating more logic or unnecessary variables will clutter the code. 
   As well, since we are using macros to define the number of days it can be easily used inside the print statement to preform the calculation, 
   rather than having an extra variable, with more lines to calculate the same value.  Like this we separate the math away from the code and make it modular and easier to understand. 
   If we would have multiple math calculations inside each loop, it would be hard to debug and identify where exactly the error is coming from. 
   As we are reusing loops for each month of the year, additional calculations of average added to them is not necessary.  
   We want to calculate the general averages of the selected month. The only math that is being done inside the loops is adding the total of the ratings of the 3 days. 
   Our calculation of the average amounts is the same regardless of the month that was inputted, therefore the chosen loop. 
